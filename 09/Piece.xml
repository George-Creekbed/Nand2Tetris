<class>
	<keyword> class </keyword>
	<identifier> KIND: class_name **+ Piece +** </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> char </keyword>
		<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> KIND: class_name **+ Array +** </identifier>
		<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> KIND: class_name **+ Array +** </identifier>
		<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> KIND: class_name **+ Array +** </identifier>
		<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> KIND: class_name **+ Array +** </identifier>
		<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> KIND: class_name **+ Array +** </identifier>
		<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> KIND: class_name **+ Array +** </identifier>
		<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> KIND: class_name **+ Array +** </identifier>
		<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> TYPE: int - KIND: field - INDEX: 11 **+ move_down +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> TYPE: int - KIND: field - INDEX: 12 **+ move_side +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> static </keyword>
		<keyword> char </keyword>
		<identifier> TYPE: char - KIND: static - INDEX: 0 **+ n +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> static </keyword>
		<keyword> char </keyword>
		<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> static </keyword>
		<keyword> char </keyword>
		<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> static </keyword>
		<keyword> char </keyword>
		<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> static </keyword>
		<keyword> char </keyword>
		<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> KIND: class_name **+ Piece +** </identifier>
		<identifier> KIND: subroutine_name **+ new +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> char </keyword>
			<identifier> TYPE: char - KIND: arg - INDEX: 0 **+ t +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: char - KIND: arg - INDEX: 0 **+ t +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: class_name **+ Array +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ new +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: class_name **+ Array +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ new +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: class_name **+ Array +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ new +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: class_name **+ Array +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ new +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: class_name **+ Array +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ new +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 11 **+ move_down +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 12 **+ move_side +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: class_name **+ Array +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ new +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: class_name **+ Array +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ new +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 5 </integerConstant>
						</term>
						<symbol> + </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
						<symbol> + </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ setFieldPos +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ drawPiece +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ dispose +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ dispose +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ dispose +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ dispose +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ dispose +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ dispose +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ dispose +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ dispose +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Memory +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ deAlloc +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ setFieldPos +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ clearRows +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
						<symbol> - </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
						<symbol> - </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ readPieceRotation +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
						<symbol> + </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
						<symbol> + </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<identifier> TYPE: char - KIND: static - INDEX: 0 **+ n +** used </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
										<symbol> - </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
										<symbol> = </symbol>
										<term>
											<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
												<symbol> = </symbol>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
														</term>
														<symbol> + </symbol>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																</term>
															</expression>
															<symbol> ] </symbol>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
														</term>
														<symbol> + </symbol>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																</term>
															</expression>
															<symbol> ] </symbol>
														</term>
														<symbol> + </symbol>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
											<keyword> else </keyword>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																</term>
															</expression>
															<symbol> ] </symbol>
														</term>
														<symbol> = </symbol>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																</term>
																<symbol> + </symbol>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																</term>
																<symbol> - </symbol>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																</term>
																<symbol> + </symbol>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
													</statements>
													<symbol> } </symbol>
													<keyword> else </keyword>
													<symbol> { </symbol>
													<statements>
														<ifStatement>
															<keyword> if </keyword>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																</term>
																<symbol> = </symbol>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																</term>
															</expression>
															<symbol> ) </symbol>
															<symbol> { </symbol>
															<statements>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																		</term>
																		<symbol> + </symbol>
																		<term>
																			<integerConstant> 1 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																		</term>
																		<symbol> + </symbol>
																		<term>
																			<integerConstant> 1 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
															</statements>
															<symbol> } </symbol>
														</ifStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ clearRows +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ drawPiece +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ readPieceRotation +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ set +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<identifier> TYPE: char - KIND: static - INDEX: 0 **+ n +** used </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
										</term>
										<symbol> - </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
										<symbol> = </symbol>
										<term>
											<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
												<symbol> = </symbol>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
														</term>
														<symbol> + </symbol>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
											<keyword> else </keyword>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
																</term>
															</expression>
															<symbol> ] </symbol>
														</term>
														<symbol> = </symbol>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
																</term>
																<symbol> - </symbol>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier> KIND: subroutine_name **+ set +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 1 **+ current_x +** used </identifier>
									</term>
								</expression>
									<symbol> , </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 2 **+ current_y +** used </identifier>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ readPieceRotation +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: char - KIND: static - INDEX: 0 **+ n +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 110 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 115 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 101 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 119 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 32 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** used </identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 105 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> | </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ] </symbol>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> | </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 3 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<integerConstant> 0 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<integerConstant> 0 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<integerConstant> 2 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<integerConstant> 3 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** used </identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 122 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 0 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> | </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 2 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<integerConstant> 0 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<integerConstant> 0 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<integerConstant> 2 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<integerConstant> 3 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
														</term>
														<symbol> = </symbol>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
												<symbol> | </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
														</term>
														<symbol> = </symbol>
														<term>
															<integerConstant> 3 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<integerConstant> 2 </integerConstant>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<integerConstant> 0 </integerConstant>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<integerConstant> 0 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<integerConstant> 2 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<integerConstant> 3 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** used </identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 115 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
														</term>
														<symbol> = </symbol>
														<term>
															<integerConstant> 0 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
												<symbol> | </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
														</term>
														<symbol> = </symbol>
														<term>
															<integerConstant> 2 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<integerConstant> 2 </integerConstant>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<integerConstant> 0 </integerConstant>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<integerConstant> 0 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<integerConstant> 2 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<integerConstant> 3 </integerConstant>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
											<keyword> else </keyword>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																</term>
																<symbol> = </symbol>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
														</term>
														<symbol> | </symbol>
														<term>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																</term>
																<symbol> = </symbol>
																<term>
																	<integerConstant> 3 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<integerConstant> 0 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<integerConstant> 0 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<integerConstant> 2 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<integerConstant> 3 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** used </identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 116 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
														</term>
														<symbol> = </symbol>
														<term>
															<integerConstant> 0 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<integerConstant> 0 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<integerConstant> 0 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<integerConstant> 2 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 0 **+ n +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<integerConstant> 3 </integerConstant>
																</term>
															</expression>
															<symbol> ] </symbol>
															<symbol> = </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
													</statements>
													<symbol> } </symbol>
													<keyword> else </keyword>
													<symbol> { </symbol>
													<statements>
														<ifStatement>
															<keyword> if </keyword>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																</term>
																<symbol> = </symbol>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
															<symbol> { </symbol>
															<statements>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<integerConstant> 2 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<integerConstant> 0 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<integerConstant> 0 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<integerConstant> 1 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<integerConstant> 2 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<integerConstant> 3 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
															</statements>
															<symbol> } </symbol>
															<keyword> else </keyword>
															<symbol> { </symbol>
															<statements>
																<ifStatement>
																	<keyword> if </keyword>
																	<symbol> ( </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																		</term>
																		<symbol> = </symbol>
																		<term>
																			<integerConstant> 2 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ) </symbol>
																	<symbol> { </symbol>
																	<statements>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 2 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 0 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 0 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 1 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 2 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 3 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																	</statements>
																	<symbol> } </symbol>
																	<keyword> else </keyword>
																	<symbol> { </symbol>
																	<statements>
																		<ifStatement>
																			<keyword> if </keyword>
																			<symbol> ( </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																				</term>
																				<symbol> = </symbol>
																				<term>
																					<integerConstant> 3 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ) </symbol>
																			<symbol> { </symbol>
																			<statements>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<integerConstant> 1 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<integerConstant> 0 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 0 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 1 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 2 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 3 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																			</statements>
																			<symbol> } </symbol>
																		</ifStatement>
																	</statements>
																	<symbol> } </symbol>
																</ifStatement>
															</statements>
															<symbol> } </symbol>
														</ifStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
											<keyword> else </keyword>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** used </identifier>
														</term>
														<symbol> = </symbol>
														<term>
															<integerConstant> 108 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<ifStatement>
															<keyword> if </keyword>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																</term>
																<symbol> = </symbol>
																<term>
																	<integerConstant> 0 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
															<symbol> { </symbol>
															<statements>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<integerConstant> 1 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<integerConstant> 0 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<integerConstant> 0 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<integerConstant> 1 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<integerConstant> 2 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																	<symbol> [ </symbol>
																	<expression>
																		<term>
																			<integerConstant> 3 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ] </symbol>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
															</statements>
															<symbol> } </symbol>
															<keyword> else </keyword>
															<symbol> { </symbol>
															<statements>
																<ifStatement>
																	<keyword> if </keyword>
																	<symbol> ( </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																		</term>
																		<symbol> = </symbol>
																		<term>
																			<integerConstant> 1 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ) </symbol>
																	<symbol> { </symbol>
																	<statements>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 3 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 0 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 0 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 1 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 2 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 3 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																	</statements>
																	<symbol> } </symbol>
																	<keyword> else </keyword>
																	<symbol> { </symbol>
																	<statements>
																		<ifStatement>
																			<keyword> if </keyword>
																			<symbol> ( </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																				</term>
																				<symbol> = </symbol>
																				<term>
																					<integerConstant> 2 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ) </symbol>
																			<symbol> { </symbol>
																			<statements>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<integerConstant> 1 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<integerConstant> 0 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 0 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 1 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 2 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 3 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																			</statements>
																			<symbol> } </symbol>
																			<keyword> else </keyword>
																			<symbol> { </symbol>
																			<statements>
																				<ifStatement>
																					<keyword> if </keyword>
																					<symbol> ( </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																						</term>
																						<symbol> = </symbol>
																						<term>
																							<integerConstant> 3 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ) </symbol>
																					<symbol> { </symbol>
																					<statements>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<integerConstant> 2 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<integerConstant> 0 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																							<symbol> [ </symbol>
																							<expression>
																								<term>
																									<integerConstant> 0 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ] </symbol>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																							<symbol> [ </symbol>
																							<expression>
																								<term>
																									<integerConstant> 1 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ] </symbol>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																							<symbol> [ </symbol>
																							<expression>
																								<term>
																									<integerConstant> 2 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ] </symbol>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																							<symbol> [ </symbol>
																							<expression>
																								<term>
																									<integerConstant> 3 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ] </symbol>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																					</statements>
																					<symbol> } </symbol>
																				</ifStatement>
																			</statements>
																			<symbol> } </symbol>
																		</ifStatement>
																	</statements>
																	<symbol> } </symbol>
																</ifStatement>
															</statements>
															<symbol> } </symbol>
														</ifStatement>
													</statements>
													<symbol> } </symbol>
													<keyword> else </keyword>
													<symbol> { </symbol>
													<statements>
														<ifStatement>
															<keyword> if </keyword>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** used </identifier>
																</term>
																<symbol> = </symbol>
																<term>
																	<integerConstant> 106 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
															<symbol> { </symbol>
															<statements>
																<ifStatement>
																	<keyword> if </keyword>
																	<symbol> ( </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																		</term>
																		<symbol> = </symbol>
																		<term>
																			<integerConstant> 0 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ) </symbol>
																	<symbol> { </symbol>
																	<statements>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 2 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 0 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 0 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 1 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 2 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 3 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																	</statements>
																	<symbol> } </symbol>
																	<keyword> else </keyword>
																	<symbol> { </symbol>
																	<statements>
																		<ifStatement>
																			<keyword> if </keyword>
																			<symbol> ( </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																				</term>
																				<symbol> = </symbol>
																				<term>
																					<integerConstant> 1 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ) </symbol>
																			<symbol> { </symbol>
																			<statements>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<integerConstant> 1 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<integerConstant> 0 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 0 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 1 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 2 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																				<letStatement>
																					<keyword> let </keyword>
																					<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																					<symbol> [ </symbol>
																					<expression>
																						<term>
																							<integerConstant> 3 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ] </symbol>
																					<symbol> = </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																						</term>
																					</expression>
																					<symbol> ; </symbol>
																				</letStatement>
																			</statements>
																			<symbol> } </symbol>
																			<keyword> else </keyword>
																			<symbol> { </symbol>
																			<statements>
																				<ifStatement>
																					<keyword> if </keyword>
																					<symbol> ( </symbol>
																					<expression>
																						<term>
																							<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																						</term>
																						<symbol> = </symbol>
																						<term>
																							<integerConstant> 2 </integerConstant>
																						</term>
																					</expression>
																					<symbol> ) </symbol>
																					<symbol> { </symbol>
																					<statements>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<integerConstant> 2 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<integerConstant> 0 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																							<symbol> [ </symbol>
																							<expression>
																								<term>
																									<integerConstant> 0 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ] </symbol>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																							<symbol> [ </symbol>
																							<expression>
																								<term>
																									<integerConstant> 1 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ] </symbol>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																							<symbol> [ </symbol>
																							<expression>
																								<term>
																									<integerConstant> 2 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ] </symbol>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																						<letStatement>
																							<keyword> let </keyword>
																							<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																							<symbol> [ </symbol>
																							<expression>
																								<term>
																									<integerConstant> 3 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ] </symbol>
																							<symbol> = </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																								</term>
																							</expression>
																							<symbol> ; </symbol>
																						</letStatement>
																					</statements>
																					<symbol> } </symbol>
																					<keyword> else </keyword>
																					<symbol> { </symbol>
																					<statements>
																						<ifStatement>
																							<keyword> if </keyword>
																							<symbol> ( </symbol>
																							<expression>
																								<term>
																									<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
																								</term>
																								<symbol> = </symbol>
																								<term>
																									<integerConstant> 3 </integerConstant>
																								</term>
																							</expression>
																							<symbol> ) </symbol>
																							<symbol> { </symbol>
																							<statements>
																								<letStatement>
																									<keyword> let </keyword>
																									<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																									<symbol> = </symbol>
																									<expression>
																										<term>
																											<integerConstant> 1 </integerConstant>
																										</term>
																									</expression>
																									<symbol> ; </symbol>
																								</letStatement>
																								<letStatement>
																									<keyword> let </keyword>
																									<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																									<symbol> = </symbol>
																									<expression>
																										<term>
																											<integerConstant> 0 </integerConstant>
																										</term>
																									</expression>
																									<symbol> ; </symbol>
																								</letStatement>
																								<letStatement>
																									<keyword> let </keyword>
																									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																									<symbol> [ </symbol>
																									<expression>
																										<term>
																											<integerConstant> 0 </integerConstant>
																										</term>
																									</expression>
																									<symbol> ] </symbol>
																									<symbol> = </symbol>
																									<expression>
																										<term>
																											<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																										</term>
																									</expression>
																									<symbol> ; </symbol>
																								</letStatement>
																								<letStatement>
																									<keyword> let </keyword>
																									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																									<symbol> [ </symbol>
																									<expression>
																										<term>
																											<integerConstant> 1 </integerConstant>
																										</term>
																									</expression>
																									<symbol> ] </symbol>
																									<symbol> = </symbol>
																									<expression>
																										<term>
																											<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																										</term>
																									</expression>
																									<symbol> ; </symbol>
																								</letStatement>
																								<letStatement>
																									<keyword> let </keyword>
																									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																									<symbol> [ </symbol>
																									<expression>
																										<term>
																											<integerConstant> 2 </integerConstant>
																										</term>
																									</expression>
																									<symbol> ] </symbol>
																									<symbol> = </symbol>
																									<expression>
																										<term>
																											<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																										</term>
																									</expression>
																									<symbol> ; </symbol>
																								</letStatement>
																								<letStatement>
																									<keyword> let </keyword>
																									<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																									<symbol> [ </symbol>
																									<expression>
																										<term>
																											<integerConstant> 3 </integerConstant>
																										</term>
																									</expression>
																									<symbol> ] </symbol>
																									<symbol> = </symbol>
																									<expression>
																										<term>
																											<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																										</term>
																									</expression>
																									<symbol> ; </symbol>
																								</letStatement>
																							</statements>
																							<symbol> } </symbol>
																						</ifStatement>
																					</statements>
																					<symbol> } </symbol>
																				</ifStatement>
																			</statements>
																			<symbol> } </symbol>
																		</ifStatement>
																	</statements>
																	<symbol> } </symbol>
																</ifStatement>
															</statements>
															<symbol> } </symbol>
															<keyword> else </keyword>
															<symbol> { </symbol>
															<statements>
																<ifStatement>
																	<keyword> if </keyword>
																	<symbol> ( </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: char - KIND: field - INDEX: 0 **+ type +** used </identifier>
																		</term>
																		<symbol> = </symbol>
																		<term>
																			<integerConstant> 111 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ) </symbol>
																	<symbol> { </symbol>
																	<statements>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: field - INDEX: 1 **+ x_offset +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 1 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: field - INDEX: 2 **+ y_offset +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 0 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 0 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 2 **+ e +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 1 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 1 **+ s +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 2 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 3 **+ w +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: Array - KIND: field - INDEX: 5 **+ connectivity +** used </identifier>
																			<symbol> [ </symbol>
																			<expression>
																				<term>
																					<integerConstant> 3 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ] </symbol>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<identifier> TYPE: char - KIND: static - INDEX: 4 **+ empty +** used </identifier>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																	</statements>
																	<symbol> } </symbol>
																</ifStatement>
															</statements>
															<symbol> } </symbol>
														</ifStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ set +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 3 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
													<symbol> = </symbol>
													<expression>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> KIND: subroutine_name **+ get +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 3 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
															<symbol> [ </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
																</term>
															</expression>
															<symbol> ] </symbol>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> KIND: subroutine_name **+ getXPos +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ i +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ i +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> KIND: subroutine_name **+ getYPos +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ j +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ j +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ printPiece +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ drawPiece +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ erasePiece +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> false </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> false </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> false </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> false </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ printBlock +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ i +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ j +** defined </identifier>
			<symbol> , </symbol>
			<keyword> bool </keyword>
			<identifier> TYPE: bool - KIND: arg - INDEX: 3 **+ select +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Screen +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ setColor +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: bool - KIND: arg - INDEX: 3 **+ select +** used </identifier>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Screen +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ drawRectangle +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 352 </integerConstant>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ i +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: field - INDEX: 12 **+ move_side +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 10 </integerConstant>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ j +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: field - INDEX: 11 **+ move_down +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 366 </integerConstant>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ i +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: field - INDEX: 12 **+ move_side +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 24 </integerConstant>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ j +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: field - INDEX: 11 **+ move_down +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ checkRows +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ println +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 3 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ println +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 3 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ println +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 3 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ println +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printInt +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 3 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ printChar +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Output +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ println +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ moveDown +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ erasePiece +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 11 **+ move_down +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 11 **+ move_down +** used </identifier>
						</term>
						<symbol> + </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ moveLeft +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ erasePiece +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 12 **+ move_side +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 12 **+ move_side +** used </identifier>
						</term>
						<symbol> - </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> - </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ moveRight +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ erasePiece +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 12 **+ move_side +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 12 **+ move_side +** used </identifier>
						</term>
						<symbol> + </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ rotateAndCheck +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ erasePiece +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ rotate +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: subroutine_name **+ checkWall +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ wall_crossed +** used </identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<keyword> true </keyword>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> KIND: subroutine_name **+ unrotate +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> KIND: subroutine_name **+ erasePiece +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ rotate +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
						</term>
						<symbol> + </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
						</term>
						<symbol> &gt; </symbol>
						<term>
							<integerConstant> 3 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ setFieldPos +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ unrotate +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
						</term>
						<symbol> - </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
						</term>
						<symbol> &lt; </symbol>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: field - INDEX: 6 **+ rotation +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 3 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ setFieldPos +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> bool </keyword>
		<identifier> KIND: subroutine_name **+ checkLeftWall +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ left_wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ left_wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
												<symbol> - </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> &lt; </symbol>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> | </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> &gt; </symbol>
										<term>
											<integerConstant> 13 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ left_wall_crossed +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<keyword> true </keyword>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ left_wall_crossed +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> bool </keyword>
		<identifier> KIND: subroutine_name **+ checkRightWall +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ right_wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ right_wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 3 **+ x_field_pos +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> &gt; </symbol>
										<term>
											<integerConstant> 9 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> | </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
													<symbol> [ </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
														</term>
													</expression>
													<symbol> ] </symbol>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> &gt; </symbol>
										<term>
											<integerConstant> 13 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ right_wall_crossed +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<keyword> true </keyword>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ right_wall_crossed +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> bool </keyword>
		<identifier> KIND: subroutine_name **+ checkBottomWall +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ bottom_wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ bottom_wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> &gt; </symbol>
								<term>
									<integerConstant> 13 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ bottom_wall_crossed +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<keyword> true </keyword>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ bottom_wall_crossed +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> bool </keyword>
		<identifier> KIND: subroutine_name **+ checkTopWall +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ top_wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ top_wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 5 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: Array - KIND: field - INDEX: 4 **+ y_field_pos +** used </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
										<symbol> - </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> &lt; </symbol>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ top_wall_crossed +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<keyword> true </keyword>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ top_wall_crossed +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> bool </keyword>
		<identifier> KIND: subroutine_name **+ checkWall +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 1 **+ left_wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 2 **+ right_wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 3 **+ bottom_wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 4 **+ top_wall_crossed +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 1 **+ left_wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: subroutine_name **+ checkLeftWall +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 2 **+ right_wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: subroutine_name **+ checkRightWall +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 3 **+ bottom_wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: subroutine_name **+ checkBottomWall +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: bool - KIND: var - INDEX: 4 **+ top_wall_crossed +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: subroutine_name **+ checkTopWall +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: bool - KIND: var - INDEX: 1 **+ left_wall_crossed +** used </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> | </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: bool - KIND: var - INDEX: 2 **+ right_wall_crossed +** used </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> | </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: bool - KIND: var - INDEX: 3 **+ bottom_wall_crossed +** used </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> | </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: bool - KIND: var - INDEX: 4 **+ top_wall_crossed +** used </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ wall_crossed +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<keyword> true </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: bool - KIND: var - INDEX: 0 **+ wall_crossed +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> char </keyword>
		<identifier> KIND: subroutine_name **+ pickType +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ seed +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ seed +** used </identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 105 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ seed +** used </identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 122 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ seed +** used </identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<integerConstant> 115 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ seed +** used </identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 3 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** used </identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<integerConstant> 116 </integerConstant>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
											<keyword> else </keyword>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ seed +** used </identifier>
														</term>
														<symbol> = </symbol>
														<term>
															<integerConstant> 4 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<letStatement>
															<keyword> let </keyword>
															<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** used </identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<integerConstant> 108 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
													</statements>
													<symbol> } </symbol>
													<keyword> else </keyword>
													<symbol> { </symbol>
													<statements>
														<ifStatement>
															<keyword> if </keyword>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ seed +** used </identifier>
																</term>
																<symbol> = </symbol>
																<term>
																	<integerConstant> 5 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
															<symbol> { </symbol>
															<statements>
																<letStatement>
																	<keyword> let </keyword>
																	<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** used </identifier>
																	<symbol> = </symbol>
																	<expression>
																		<term>
																			<integerConstant> 106 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ; </symbol>
																</letStatement>
															</statements>
															<symbol> } </symbol>
															<keyword> else </keyword>
															<symbol> { </symbol>
															<statements>
																<ifStatement>
																	<keyword> if </keyword>
																	<symbol> ( </symbol>
																	<expression>
																		<term>
																			<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ seed +** used </identifier>
																		</term>
																		<symbol> = </symbol>
																		<term>
																			<integerConstant> 6 </integerConstant>
																		</term>
																	</expression>
																	<symbol> ) </symbol>
																	<symbol> { </symbol>
																	<statements>
																		<letStatement>
																			<keyword> let </keyword>
																			<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** used </identifier>
																			<symbol> = </symbol>
																			<expression>
																				<term>
																					<integerConstant> 111 </integerConstant>
																				</term>
																			</expression>
																			<symbol> ; </symbol>
																		</letStatement>
																	</statements>
																	<symbol> } </symbol>
																</ifStatement>
															</statements>
															<symbol> } </symbol>
														</ifStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ ret_type +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ printNextPiece +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ eraseNextPiece +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 4 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 7 **+ row0 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> false </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 8 **+ row1 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> false </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 9 **+ row2 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> false </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 10 **+ row3 +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<keyword> false </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ printNextBlock +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ i +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ j +** defined </identifier>
			<symbol> , </symbol>
			<keyword> bool </keyword>
			<identifier> TYPE: bool - KIND: arg - INDEX: 3 **+ select +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Screen +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ setColor +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: bool - KIND: arg - INDEX: 3 **+ select +** used </identifier>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Screen +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ drawRectangle +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 108 </integerConstant>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ i +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 152 </integerConstant>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ j +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 122 </integerConstant>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ i +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 166 </integerConstant>
							</term>
							<symbol> + </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<integerConstant> 16 </integerConstant>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ j +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
