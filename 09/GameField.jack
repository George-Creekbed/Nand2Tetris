class GameField {
	field Array board;
	field int height;
	field int width;
	
	constructor GameField new(int w, int h)
	{
		var int i;
		var int j;
		
		let height = h; //14;
		let width = w; //10;		
		let board = Array.new(height * width);	// y axis
		
	return this;		
	}
	
    /** Disposes this board. */
    method void dispose() 
    {
		do board.dispose();
        do Memory.deAlloc(this);
       
    return;
    }
    
    method void set(int x, int y) // value will always be 1 useless param here, int value)
    {
		var int pos_on_board;
		
		let pos_on_board = y * width + x;
		let board[pos_on_board] = 1;
		
	return;
    }
    
    method void setWithValue(int x, int y, int value) // here it is useful instead... set function made redundant
    {
		var int pos_on_board;
		
		let pos_on_board = y * width + x;
		let board[pos_on_board] = value;
		
	return;
    }
    
    method int get(int x, int y)
    {
		var int return_value;
		var int pos_on_board;
		
		let pos_on_board = y * width + x;
		let return_value = board[pos_on_board];
		
	return return_value;
    }
	
	method void printField(bool select)
	{
		var int i;
		var int y;
		var int x;
		
		let i = 0;
		while (~(i = (height * width)))
		{	
			let y = i / width;
			let x = i - (y * width);
			if (board[i] = 1)
			{
				do Screen.setColor(select);
				do Screen.drawRectangle(272 + (16 * x), 10 + (16 * y), 
				                        286 + (16 * x), 24 + (16 * y)); 
			}

			let i = i + 1;
		}
	
	return;
	}
	
	method int checkFilledLines()
	{
		var int i;
		var int j;
		var int counter_lines;
		var bool check_line;
		
		let counter_lines = 0;
		let j = 1;
		while ((~(j = height)) & (~(counter_lines = 4)))
		{
			let i = 0;
			let check_line = true;
			while(~(i = width) & (check_line = true))
			{
				if (get(i, j) = 0) {let check_line = false;}
				let i = i + 1;
			}
			if (check_line = true) 
			{
				do moveLinesDown(j);
				let counter_lines = counter_lines + 1;
			}
			let j = j + 1;
		}
			
	return counter_lines;
	}
	
	method void moveLinesDown(int start_line)
	{
		var int i;
		var int j;
		
		do flashingLine(start_line, false, 15);
		do printField(false);
		
		let j = start_line;
		while (~(j = 0))
		{
			let i = 0;
			while (~(i = width))
			{
				do setWithValue(i, j, get(i, j - 1));
				let i = i + 1;
			}
			let j = j - 1;
		}
		// same cycle, top line filled with 0s
		let i = 0;
		while (~(i = width))
		{
			do setWithValue(i, 0, 0);
			let i = i + 1;
		}
		
		do printField(true);
		
	return;
	}
	
	method void flashingLine(int start_line, bool select, int count) // recursive!
	{
		var int i;
		
		let i = 0;
		do Screen.setColor(select);
		while (~(i = width))
		{
			do Screen.drawRectangle(272 + (16 * i), 10 + (16 * start_line), 
			                        286 + (16 * i), 24 + (16 * start_line));
			let i = i + 1;
		}
		do Sys.wait(50);
		
		let count = count - 1;
		if (select = true) 
			{let select = false;}
		else
		    {let select = true;}
		    
		if (~(count = 0))
			{do flashingLine(start_line, select, count);}
		
	return;
	}	
}
