<class>
	<keyword> class </keyword>
	<identifier> KIND: class_name **+ GameField +** </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> KIND: class_name **+ Array +** </identifier>
		<identifier> TYPE: Array - KIND: field - INDEX: 0 **+ board +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> TYPE: int - KIND: field - INDEX: 1 **+ height +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** defined </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> KIND: class_name **+ GameField +** </identifier>
		<identifier> KIND: subroutine_name **+ new +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ w +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ h +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 1 **+ height +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ h +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 0 **+ w +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 0 **+ board +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> KIND: class_name **+ Array +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ new +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: field - INDEX: 1 **+ height +** used </identifier>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ dispose +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 0 **+ board +** used </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ dispose +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Memory +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ deAlloc +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ set +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ pos_on_board +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ pos_on_board +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
						</term>
						<symbol> * </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
						</term>
						<symbol> + </symbol>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 0 **+ board +** used </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ pos_on_board +** used </identifier>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ setWithValue +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 3 **+ value +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ pos_on_board +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ pos_on_board +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
						</term>
						<symbol> * </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
						</term>
						<symbol> + </symbol>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: Array - KIND: field - INDEX: 0 **+ board +** used </identifier>
					<symbol> [ </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ pos_on_board +** used </identifier>
						</term>
					</expression>
					<symbol> ] </symbol>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 3 **+ value +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> KIND: subroutine_name **+ get +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ pos_on_board +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 1 **+ pos_on_board +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 2 **+ y +** used </identifier>
						</term>
						<symbol> * </symbol>
						<term>
							<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
						</term>
						<symbol> + </symbol>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ x +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: Array - KIND: field - INDEX: 0 **+ board +** used </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ pos_on_board +** used </identifier>
								</term>
							</expression>
							<symbol> ] </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ return_value +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ printField +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> bool </keyword>
			<identifier> TYPE: bool - KIND: arg - INDEX: 1 **+ select +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ y +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 2 **+ x +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: field - INDEX: 1 **+ height +** used </identifier>
											</term>
											<symbol> * </symbol>
											<term>
												<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 1 **+ y +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> / </symbol>
								<term>
									<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 2 **+ x +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> - </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 1 **+ y +** used </identifier>
										</term>
										<symbol> * </symbol>
										<term>
											<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: Array - KIND: field - INDEX: 0 **+ board +** used </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: class_name **+ Screen +** </identifier>
									<symbol> . </symbol>
									<identifier> KIND: subroutine_name **+ setColor +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: bool - KIND: arg - INDEX: 1 **+ select +** used </identifier>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: class_name **+ Screen +** </identifier>
									<symbol> . </symbol>
									<identifier> KIND: subroutine_name **+ drawRectangle +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 272 </integerConstant>
											</term>
											<symbol> + </symbol>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<integerConstant> 16 </integerConstant>
													</term>
													<symbol> * </symbol>
													<term>
														<identifier> TYPE: int - KIND: var - INDEX: 2 **+ x +** used </identifier>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 10 </integerConstant>
											</term>
											<symbol> + </symbol>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<integerConstant> 16 </integerConstant>
													</term>
													<symbol> * </symbol>
													<term>
														<identifier> TYPE: int - KIND: var - INDEX: 1 **+ y +** used </identifier>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 286 </integerConstant>
											</term>
											<symbol> + </symbol>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<integerConstant> 16 </integerConstant>
													</term>
													<symbol> * </symbol>
													<term>
														<identifier> TYPE: int - KIND: var - INDEX: 2 **+ x +** used </identifier>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<integerConstant> 24 </integerConstant>
											</term>
											<symbol> + </symbol>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<integerConstant> 16 </integerConstant>
													</term>
													<symbol> * </symbol>
													<term>
														<identifier> TYPE: int - KIND: var - INDEX: 1 **+ y +** used </identifier>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> KIND: subroutine_name **+ checkFilledLines +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 2 **+ counter_lines +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> bool </keyword>
				<identifier> TYPE: bool - KIND: var - INDEX: 3 **+ check_line +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 2 **+ counter_lines +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ~ </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
											<symbol> = </symbol>
											<term>
												<identifier> TYPE: int - KIND: field - INDEX: 1 **+ height +** used </identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> &amp; </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ~ </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 2 **+ counter_lines +** used </identifier>
											</term>
											<symbol> = </symbol>
											<term>
												<integerConstant> 4 </integerConstant>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: bool - KIND: var - INDEX: 3 **+ check_line +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<keyword> true </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ~ </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
											<symbol> = </symbol>
											<term>
												<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</term>
								<symbol> &amp; </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> TYPE: bool - KIND: var - INDEX: 3 **+ check_line +** used </identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<keyword> true </keyword>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> KIND: subroutine_name **+ get +** </identifier>
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
													</term>
												</expression>
													<symbol> , </symbol>
												<expression>
													<term>
														<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> TYPE: bool - KIND: var - INDEX: 3 **+ check_line +** used </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<keyword> false </keyword>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> TYPE: bool - KIND: var - INDEX: 3 **+ check_line +** used </identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<keyword> true </keyword>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ moveLinesDown +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 2 **+ counter_lines +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 2 **+ counter_lines +** used </identifier>
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: var - INDEX: 2 **+ counter_lines +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ moveLinesDown +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ start_line +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ flashingLine +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ start_line +** used </identifier>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<keyword> false </keyword>
							</term>
						</expression>
							<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 15 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ printField +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> false </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ start_line +** used </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ~ </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
											<symbol> = </symbol>
											<term>
												<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> KIND: subroutine_name **+ setWithValue +** </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
											</term>
										</expression>
											<symbol> , </symbol>
										<expression>
											<term>
												<identifier> KIND: subroutine_name **+ get +** </identifier>
												<symbol> ( </symbol>
												<expressionList>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
														</term>
													</expression>
														<symbol> , </symbol>
													<expression>
														<term>
															<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
														</term>
														<symbol> - </symbol>
														<term>
															<integerConstant> 1 </integerConstant>
														</term>
													</expression>
												</expressionList>
												<symbol> ) </symbol>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 1 **+ j +** used </identifier>
								</term>
								<symbol> - </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> KIND: subroutine_name **+ setWithValue +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
								</expression>
									<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
									<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: subroutine_name **+ printField +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> true </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> KIND: subroutine_name **+ flashingLine +** </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ start_line +** defined </identifier>
			<symbol> , </symbol>
			<keyword> bool </keyword>
			<identifier> TYPE: bool - KIND: arg - INDEX: 2 **+ select +** defined </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> TYPE: int - KIND: arg - INDEX: 3 **+ count +** defined </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** defined </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Screen +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ setColor +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> TYPE: bool - KIND: arg - INDEX: 2 **+ select +** used </identifier>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<identifier> TYPE: int - KIND: field - INDEX: 2 **+ width +** used </identifier>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> KIND: class_name **+ Screen +** </identifier>
							<symbol> . </symbol>
							<identifier> KIND: subroutine_name **+ drawRectangle +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 272 </integerConstant>
									</term>
									<symbol> + </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<integerConstant> 16 </integerConstant>
											</term>
											<symbol> * </symbol>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
									<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 10 </integerConstant>
									</term>
									<symbol> + </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<integerConstant> 16 </integerConstant>
											</term>
											<symbol> * </symbol>
											<term>
												<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ start_line +** used </identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
									<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 286 </integerConstant>
									</term>
									<symbol> + </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<integerConstant> 16 </integerConstant>
											</term>
											<symbol> * </symbol>
											<term>
												<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
									<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 24 </integerConstant>
									</term>
									<symbol> + </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<integerConstant> 16 </integerConstant>
											</term>
											<symbol> * </symbol>
											<term>
												<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ start_line +** used </identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> TYPE: int - KIND: var - INDEX: 0 **+ i +** used </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> KIND: class_name **+ Sys +** </identifier>
					<symbol> . </symbol>
					<identifier> KIND: subroutine_name **+ wait +** </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 50 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> TYPE: int - KIND: arg - INDEX: 3 **+ count +** used </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> TYPE: int - KIND: arg - INDEX: 3 **+ count +** used </identifier>
						</term>
						<symbol> - </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> TYPE: bool - KIND: arg - INDEX: 2 **+ select +** used </identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<keyword> true </keyword>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: bool - KIND: arg - INDEX: 2 **+ select +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<keyword> false </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> TYPE: bool - KIND: arg - INDEX: 2 **+ select +** used </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<keyword> true </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 3 **+ count +** used </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> KIND: subroutine_name **+ flashingLine +** </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 1 **+ start_line +** used </identifier>
									</term>
								</expression>
									<symbol> , </symbol>
								<expression>
									<term>
										<identifier> TYPE: bool - KIND: arg - INDEX: 2 **+ select +** used </identifier>
									</term>
								</expression>
									<symbol> , </symbol>
								<expression>
									<term>
										<identifier> TYPE: int - KIND: arg - INDEX: 3 **+ count +** used </identifier>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
