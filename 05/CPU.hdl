// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=outAlu, sel=instruction[15], out=inARegister);
    Not(in=instruction[15], out=notInstruction15);
    Mux(a=notInstruction15, b=instruction[5], sel=instruction[15], out=loadARegister);
    ARegister(in=inARegister, load=loadARegister, out=outARegister, out[0..14]=addressM);
    
    Mux16(a=outARegister, b=inM, sel=instruction[12], out=outAM);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadDRegister);   
    DRegister(in=outAlu, load=loadDRegister, out=outD);
    
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], zr=counterAlu0, ng=counterAluNg, out=outAlu); 
    Mux16(a=false, b=outAlu, sel=instruction[3], out=outM);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
    
    Mux(a=false, b=counterAluNg, sel=instruction[15], out=filterCounterAluNg);
    And(a=filterCounterAluNg, b=instruction[2], out=loadNg);
    Mux(a=false, b=counterAlu0, sel=instruction[15], out=filterCounterAlu0);
    And(a=filterCounterAlu0, b=instruction[1], out=load0);
    Or(a=loadNg, b=load0, out=loadNg0);
    Mux(a=false, b=instruction[0], sel=instruction[15], out=filterCounterAluPos);
    Or(a=counterAluNg, b=counterAlu0, out=ngZr);
    Mux(a=filterCounterAluPos, b=false, sel=ngZr, out=loadPos);
    Or(a=loadNg0, b=loadPos, out=loadJump);
    PC(in=outARegister, load=loadJump, inc=true, reset=reset, out=unused, out[0..14]=pc);    
}
