// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	
	static Array two_to_the;
	
    /** Initializes the library. */
    function void init() {
		let two_to_the = Array.new(16);
		let two_to_the[0] = 1;
		let two_to_the[1] = 2;
		let two_to_the[2] = 4;
		let two_to_the[3] = 8;
		let two_to_the[4] = 16;
		let two_to_the[5] = 32;
		let two_to_the[6] = 64;
		let two_to_the[7] = 128;
		let two_to_the[8] = 256;
		let two_to_the[9] = 512;
		let two_to_the[10] = 1024;
		let two_to_the[11] = 2048;
		let two_to_the[12] = 4096;
		let two_to_the[13] = 8192;
		let two_to_the[14] = 16384;
		let two_to_the[15] = 32767 + 1;		// 32768 goes overflow
		
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		var int ret;
		
		if (x < 0)
			{let ret = -x;}
		else
			{let ret = x;}
		
		return ret;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum, shifted_x;
		var int i;
		var int abs_y, abs_x;
		
		if ((x = 0) | (y = 0))
			{return 0;}
		else {if (x = 1)
			{return y;}
		else {if (y = 1)
			{return x;}
		else {if (x = -1)
			{return y;}
		else {if (y = -1)
			{return x;}}}}}
		
		let abs_x = Math.abs(x);
		let abs_y = Math.abs(y);
		
		let sum = 0;
		let shifted_x = abs_x;
		
		let i = 0;
		while (~(i = 15)){
			if (Math.bit(abs_y, i)) 
				{let sum = sum + shifted_x;}
			let shifted_x = shifted_x + shifted_x;
			let i = i + 1;
		}
		
		if ( ((x < 0) & (y > 0)) | ((x > 0) & (y < 0)) )
			{let sum = -sum;}
			
		return sum;
    }
    
    // auxiliary to multiply; returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i) {
		if (~((x & two_to_the[i]) = 0))
			{return true;}
		else 
			{return false;}	
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x_in, int y_in) {
		var int q, qy;
		var int x, y, y2;
		var int ret;
		
		if (y_in = (32767+1))    // Handle division by -32768
			{if (x_in = y_in)
				 {return 1;}
             else 
                 {return 0;}}
		let x = Math.abs(x_in);
		let y = Math.abs(y_in);
		if (y = 0) 
			{do Sys.error(3);}
		if ((y > x) | ( y < 0))
			{return 0;}
		let y2 = y + y;
		let q = Math.divide(x, y2);
		//let q = Math.abs(q);
		let qy = q * y;
		if ((x - qy - qy) < y)
			{let ret = q + q;}
		else
			{let ret = q + q + 1;}
		
		if ( ((x_in < 0) & (y_in > 0)) | ((x_in > 0) & (y_in < 0)) )
			{let ret = -ret;}
		
		return ret;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y;
		var int j;
		
		let y = 0;
		let j = 7;  //  n/2 - 1 = 7, considering n = 16 number of bits in ram word
		while (~(j < 0))
			{if ( (( ((y + two_to_the[j]) * (y + two_to_the[j])) < x) | 
			      ((y + two_to_the[j]) * (y + two_to_the[j]) = x)) &
			      (((y + two_to_the[j]) * (y + two_to_the[j])) > 0))
				{let y = y + two_to_the[j];}
			 let j = j - 1;}
			 
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if ((a > b) | (a = b))
			{return a;}
		else
			{return b;}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if ((a < b) | (a = b))
			{return a;}
		else
			{return b;}
    }
}
