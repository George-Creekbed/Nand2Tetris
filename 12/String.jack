// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length;
	static int counter;	// used to count recursions in method setInt

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength = 0) {		// special case, empty string
			let maxLength = 1;
		}
		
		let str = Array.new(maxLength);
		let length = 0;
		let counter = 0;		
		
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Array.dispose(str);
		
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		var char c;
		
		let c = str[j];
		
		return c;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
			let str[length] = c;
			let length = length + 1;
		
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let str[length] = 32;
		let length = length - 1;
		
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int value, i, aux;
		
		let value = 0;
		if (str[0] = 45) {				// in case of negative number ('-' = ascii(45))
			let i = 1;
		} else {
			let i = 0;
		}
		while (i < length) {
			let aux = str[i] - 48;		// ascii of 0 = 48 -> (int) 0 = 48 - 48
			let value = (value * 10) + aux;
			let i = i + 1;
		}
		
		if (str[0] = 45) {
			let value = -value;
		}
		
		return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int last_digit;
		var char c;
		
		if (counter = 0) {
			let length = 0;
		}
		
		if (val < 0) {
			do appendChar(45);		// '-' = ascii(45)
			let val = -val;
		}
		let last_digit = val - (10 * (val / 10));		// val % 10
		let c = String.toChar(last_digit);
		
		if (val < 10) {
			do appendChar(c);
			let counter = 0;
			//return;
		} else {
			let counter = counter + 1;
			do setInt(val / 10);
			do appendChar(c);
		}
		
		return;
    }

    /** Auxiliary to setInt */
    function char toChar(int val)
    {
		return val + 48;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
